{"version":3,"sources":["Components/ContactForm.js","Components/ContactItem.js","Components/ContactList.js","Components/Filter.js","App.js","index.js"],"names":["ContactForm","state","name","number","handeChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","className","type","onChange","pattern","title","required","Component","ContactItem","id","onDelete","onClick","ContactList","contacts","map","Filter","App","filter","setContactId","contactIds","contact","push","replace","Math","max","capitalizeFirstLetter","string","charAt","toUpperCase","slice","formSubmitHandler","data","normalizedName","toLowerCase","find","alert","newContact","prevState","deleteContact","contactId","changeFilter","localStorage","getItem","parsedContacts","JSON","parse","prevProps","setItem","stringify","normalizedFilter","visibleContacts","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbd0389a.chunk.js","sourcesContent":["import { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handeChange = e => {\n    const { name, value } = e.currentTarget;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    this.props.onSubmit(this.state); // App formSubmitHandler\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label className=\"label\">\n          Name\n          <input\n            className=\"input\"\n            type=\"text\"\n            value={this.state.name}\n            onChange={this.handeChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"label\">\n          Phone\n          <input\n            className=\"input\"\n            type=\"tel\"\n            value={this.state.number}\n            onChange={this.handeChange}\n            name=\"number\"\n            required\n          />\n        </label>\n        <button className=\"button\" type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default ContactForm;","import PropTypes from 'prop-types';\n\nconst ContactItem = ({ id, name, number, onDelete }) => (\n  <li className=\"contact-list-item\">\n    <p className=\"name bold\">{name}</p>\n    <p>{number}</p>\n    <button className=\"button\" onClick={() => onDelete(id)}>\n      Delete\n    </button>\n  </li>\n);\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactItem;","import PropTypes from 'prop-types';\nimport ContactItem from './ContactItem';\n\nconst ContactList = ({ contacts, onDelete }) => (\n  <ul className=\"contact-list\">\n    {contacts.map(({ id, name, number }) => (\n      <ContactItem\n        key={id}\n        id={id}\n        name={name}\n        number={number}\n        onDelete={onDelete}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n  onDelete: PropTypes.func.isRequired,\n};\n\nexport default ContactList;","import PropTypes from 'prop-types';\n\nconst Filter = ({ value, onChange }) => (\n  <label className=\"label\">\n    Find contacts by name\n    <input\n      className=\"input\"\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    ></input>\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;","import { Component } from 'react';\n// Components\nimport ContactForm from './Components/ContactForm';\nimport ContactList from './Components/ContactList';\nimport Filter from './Components/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  setContactId = () => {\n    const contactIds = [];\n    this.state.contacts.map(contact =>\n      contactIds.push(contact.id.replace(/\\D/g, '')),\n    );\n    return 'id-' + (Math.max(...contactIds) + 1);\n  };\n\n  capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  formSubmitHandler = data => {\n    const { name, number } = data;\n    const normalizedName = name.toLowerCase();\n\n    if (\n      this.state.contacts.find(\n        ({ name }) => name.toLowerCase() === normalizedName,\n      )\n    ) {\n      return alert(`${name} is already in contacts.`);\n    }\n\n    const newContact = {\n      id: this.setContactId(),\n      name: this.capitalizeFirstLetter(name),\n      number,\n    };\n    this.setState(prevState => ({\n      contacts: [...prevState.contacts, newContact],\n    }));\n  };\n\n  deleteContact = contactId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== contactId),\n    }));\n  };\n\n  //LOCAL STORAGE START\n\n  componentDidMount() {\n    const contacts = localStorage.getItem('contacts');\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    // console.log('Component did update');\n    // console.log(prevState);\n    // console.log(this.state);\n\n    if (this.state.contacts !== prevState.contacts) {\n      // console.log('Contacts update');\n      localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n    }\n  }\n\n  //LOCAL STORAGE END\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = this.state.filter.toLowerCase();\n\n    const visibleContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n    return (\n      <div className=\"phonebook\">\n        <h1 className=\"phonebook_title\">Phonebook</h1>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n        <h2 className=\"phonebook_title\">Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList contacts={visibleContacts} onDelete={this.deleteContact} />\n      </div>\n    );\n  }\n}\n\nexport default App;","import 'modern-normalize/modern-normalize.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);"],"sourceRoot":""}